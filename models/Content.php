<?php

namespace app\models;

use app\components\AppActiveRecord;
use Yii;
use yii\db\ActiveQuery;
use yii\db\Expression;

/**
 * This is the model class for table "content".
 *
 * @property integer $id
 * @property string $title
 * @property integer $type
 * @property string $image
 * @property string $description
 * @property integer $status
 * @property integer $admin_user_id
 * @property integer $created_at
 * @property integer $updated_at
 */
class Content extends AppActiveRecord {

    /** 新闻 */
    const TYPE_NEWS = 1;

    /** 产品 */
    const TYPE_PRODUCTS = 2;

    /** 下载 */
    const TYPE_DOWNLOADS = 3;

    /** 照片相册 */
    const TYPE_PHOTOS = 4;

    /** 积分产品 */
    const TYPE_POINT_PRODUCTS = 5;

    /** @var array  */
    static public $types = [
        self::TYPE_NEWS => '新闻',
        self::TYPE_PRODUCTS => '下单商品',
        self::TYPE_DOWNLOADS => '下载',
        self::TYPE_PHOTOS => '照片',
        self::TYPE_POINT_PRODUCTS => '米商品',
    ];

    /**
     * 自动更新详情
     * @var bool
     */
    public static $autoUpdateDetail = true;

    /**
     * 当前的类型
     */
    static $currentType = self::TYPE_NEWS;

    /** 前台不显示 */
    const STATUS_DISABLE = 0;

    /** 前台显示 */
    const STATUS_ENABLE = 1;

    /** @var array  */
    static public $statusList = [
        self::STATUS_DISABLE => '未审核',
        self::STATUS_ENABLE => '审核',
    ];

    /** @var  ContentDetail */
    protected $_detail;

    /**
     * @inheritdoc
     */
    public static function tableName() {
        return '{{%content}}';
    }

    public function init() {
        parent::init();
        $this->setAttribute('type', static::$currentType);
    }

    public function load($data, $formName = null) {
        $res = parent::load($data, $formName);
        if (static::$autoUpdateDetail && $res) {
            return $this->getDetail()->load($data);
        }
        return $res;
    }

    public function getDetail() {
        if (empty($this->_detail)) {
            $this->_detail = $this->detail();
        }
        return $this->_detail;
    }

    /**
     * @return \app\models\ContentDetail
     */
    public function detail() {
        if ($this->isNewRecord) {
            return new ContentDetail();
        } else {
            $contentModel = $this->hasOne(ContentDetail::class, ['content_id' => 'id'])->one();
            if( ! $contentModel){
                $contentModel = new ContentDetail();
            }
            return $contentModel;
        }
    }

    /**
     * 获取全部的新闻分类
     * @return array|\yii\db\ActiveRecord[]
     */
    public function getCategorys() {
        return Category::find()->where(['type' => static::$currentType])->all();
    }

    /**
     * 下一个
     */
    public function next() {
        return static::find()->where(['status' => static::STATUS_ENABLE])->andWhere(['>', 'id', $this->id])
                        ->orderBy('id asc')
                        ->limit(1)
                        ->one();
    }

    /**
     * 上一个
     */
    public function previous() {
        return static::find()->where(['status' => static::STATUS_ENABLE])->andWhere(['<', 'id', $this->id])
                        ->orderBy('id desc')
                        ->limit(1)
                        ->one();
    }

    /**
     * 更新 detail 表中的 contend_id
     * @param bool $insert
     * @param array $changedAttributes
     */
    public function afterSave($insert, $changedAttributes) {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        if (static::$autoUpdateDetail) {
            if (empty($this->_detail->content_id)) {
                $this->_detail->content_id = $this->id;
            }
            $this->_detail->save();
        }
    }

    /**
     * 删除详情
     */
    public function afterDelete() {
        parent::afterDelete(); // TODO: Change the autogenerated stub
        $this->getDetail()->delete();
    }

    /**
     * @inheritdoc
     */
    public function rules() {
        return [
                [['title', 'type', 'status', 'category_id'], 'required'],
                [['type', 'status', 'admin_user_id', 'category_id', 'created_at', 'updated_at'], 'integer'],
                [['title', 'image', 'description', 'keywords'], 'string', 'max' => 255],
        ];
    }

    /**
     * 内容类型
     * @return mixed|null
     */
    public function getTypeText() {
        return isset(self::$types[$this->type]) ? self::$types[$this->type] : null;
    }

    /**
     * 内容状态文字描述
     * return string|null
     */
    public function getStatusText() {
        return isset(self::$statusList[$this->status]) ? self::$statusList[$this->status] : null;
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels() {
        return [
            'id' => 'ID',
            'title' => '标题',
            'typeText' => '类型',
            'category_id' => '分类',
            'image' => '图片',
            'description' => 'Description',
            'keywords' => 'Keywords',
            'status' => '状态',
            'statusText' => '状态',
            'market_price' => '市场价',
            'member_price' => '会员价',
            'created_at' => '创建时间'
        ];
    }

    /**
     * @inheritdoc
     * @return \yii\db\ActiveQuery the newly created [[ActiveQuery]] instance.
     */
    public static function find() {
        ContentQuery::$type = static::$currentType;
        return Yii::createObject(ContentQuery::class, [get_called_class()]);
    }

}

class ContentQuery extends ActiveQuery {

    static $type = Content::TYPE_NEWS;

    public function init() {
        if (self::$type) {
            $this->andWhere(['type' => self::$type]);
        } else {
            $this->andFilterWhere(['in', 'type', array_keys(Content::$types)]);
        }
        return $this;
    }

    /**
     * Sets the WHERE part of the query.
     *
     * The method requires a `$condition` parameter, and optionally a `$params` parameter
     * specifying the values to be bound to the query.
     *
     * The `$condition` parameter should be either a string (e.g. `'id=1'`) or an array.
     *
     * @inheritdoc
     *
     * @param string|array|Expression $condition the conditions that should be put in the WHERE part.
     * @param array $params the parameters (name => value) to be bound to the query.
     * @return $this the query object itself
     * @see andWhere()
     * @see orWhere()
     * @see QueryInterface::where()
     */
    public function where($condition, $params = []) {
        parent::andWhere($condition, $params);
        return $this;
    }

}
